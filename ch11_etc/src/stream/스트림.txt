스트림
-컬렉션(배열포함)의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있도록 도와주는 반복자
-내부반복자 사용 (외부반복자(for,while 등등) 명시하지 않고도 알아서 가져옴)
-중간처리(매핑, 필터링, 정렬)와 최종처리(반복, 카운팅, 합계, 평균) 
    > 중간처리 (최종처리만 안 하며 중간처리는 계속 걸 수 있음)
        1) filter() : 조건 필터링
        2) distinct() : 중복 제거 (sql이랑 같음)
        3) map() : 스트림의 요소를 변환 map(Function<T, R>mapper)
           mapToInt() : mapToInt(ToIntFunction<? super Member> mapper) : R(리턴)타입이 int
           mapToLong() : = , R(리턴)타입이 long
           mapToDouble() : = , R(리턴)타입이 double 
        4) skip() : 스트림 일부를 잘라낼때 사용
        5) limit() : 스트림 일부를 잘라낼때 사용
        6) peek() : 중간연산 확인  

    > 최종처리
        1) forEach()
        2) collect()
        3) count() / sum() / average() / max() / min()
-한 번 소비(최종처리) 되면 끝이고 다시 쓰려면 재생성 해야함

-Optional<T> 
    > 최종 연산의 결과를 Optional 객체에 담아서 반환 
    > 반환된 결과가 null 인지 매번 if 문으로 체크하는 대신 Optional에 정의된 메서드를 통해서 간단히 처리할 수 있다
    > Optional 객체 값 가져오기 : get()
    > 널일 때 반환값 지정 : orElse;  
        >> ex) optStr.orElse(""); 
    > 널일 때 false, 아닐 때 true : isPresent() 
    > 널일 때 아무 일도 안 함, 널이 아닐 때 람다식(Consumer)을 실행 : ifPresent(Consumer)
    
OptionalDouble
OptionalInt


