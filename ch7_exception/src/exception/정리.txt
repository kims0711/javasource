<exception> : 예외
-발생시점
1. 컴파일 에러: 컴파일 시에 발생하는 에러 (빨간줄, 실행 전부터 문법적으로 안 맞는 내용)
2. 런타임 에러: 런타임(실행) 시에 발생하는 에러 (실행해야 알 수 있음)
    (1) error : 메모리 부족, 스택오버플로우
    (2) exception : 수습이 가능


     Object
       |
       |
   Throwable
       |
       |
|---------------------------------------------|
Exception                                Error
    |-IoException
    |-ClassNotFoundException
    |-RuntimeException (실행시)
             |--ArithmeticException
             |--NullPointerException
             |-- ~~(여러가지 많음)

https://docs.oracle.com/en/java/javase/23/docs/api/java.base/module-summary.html   // 자바 API 클래스 정보들 보는 곳


<Exception 처리>
1. try ~ catch 문 : try(이런 예외가 발생하면) catch(이렇게 처리해라)
try{
    예외가 발생할 가능성이 있는 문장
}catch(Exception ex){
    Exception 발생시 처리하기 위한 문장1
}catch(Exception ex){
    Exception 발생시 처리하기 위한 문장2
}catch(Exception ex){
    Exception 발생시 처리하기 위한 문장3 //여러개 가능(개별로 받을 수 있음)
}

catch 문 작성 시에 multi 블럭 가능
try{
    예외가 발생할 가능성이 있는 문장
}catch(ArrayIndexOutOfBoundsException | ArithmeticException e){
    Exception 발생시 처리하기 위한 문장
}

2. try ~ catch ~ finally
> finally: 예외의 발생여부와 상관없이 반드시 실행되어야 할 코드 작성
         : ex) 리소스(입출력스트림, 소켓,..)의 close() 호출 -> sc.colse(); 같은 것들

3. 강제 예외 발생 - Exception 사용
> throw new Exception("") 

4. 예외 전달 
throws Exception

try-with-resources : 자동 리소스 닫기
+ finally 에서 주로 자원닫기 구문 실행 => 자바 버전 1.7부터 자동 닫기 지원

try(자동으로 닫아야 하는 객체 생성){
    
}catch(Exception){

}